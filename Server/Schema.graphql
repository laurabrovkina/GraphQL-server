schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type CreateUserPayload {
  clientMutationId: ID
  user: User!
}

type InviteFriendPayload {
  clientMutationId: ID
  me: Person!
}

type LoginPayload {
  clientMutationId: ID
  me: Person!
  scheme: ID!
  token: ID!
}

type Message {
  direction: Direction!
  id: ID!
  recipient: Person!
  sender: Person!
  sent: DateTime!
  text: ID!
}

"A connection to a list of items."
type MessageConnection {
  "A list of edges."
  edges: [MessageEdge!]
  "A flattened list of the nodes."
  nodes: [Message]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}

"An edge in a connection."
type MessageEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Message
}

type Mutation {
  createUser(input: CreateUserInput!): CreateUserPayload!
  inviteFriend(input: InviteFriendInput!): InviteFriendPayload!
  login(input: LoginInput!): LoginPayload!
  sendMessage(input: SendMessageInput!): SendMessagePayload!
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type Person {
  addFriendId(id: ID!): Person!
  email: ID!
  friends(after: String before: String first: PaginationAmount last: PaginationAmount order_by: PersonSort where: PersonFilter): PersonConnection
  id: ID!
  imageUri: Url
  isOnline: Boolean!
  lastSeen: DateTime!
  messages(after: String before: String first: PaginationAmount last: PaginationAmount order_by: MessageSort where: MessageFilter): MessageConnection
  name: ID!
}

"A connection to a list of items."
type PersonConnection {
  "A list of edges."
  edges: [PersonEdge!]
  "A flattened list of the nodes."
  nodes: [Person]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}

"An edge in a connection."
type PersonEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Person
}

type Query {
  "Gets the currently logged in user."
  me: Person! @authorize(roles: [  ])
  "Gets access to all the people known to this service."
  people(after: String before: String first: PaginationAmount last: PaginationAmount order_by: PersonSort where: PersonFilter): PersonConnection @authorize(roles: [  ])
  personByEmail(email: ID!): Person! @authorize(roles: [  ])
  personById(id: ID!): Person! @authorize(roles: [  ])
}

type SendMessagePayload {
  clientMutationId: ID
  message: Message!
  recipient: Person!
  sender: Person!
}

type Subscription {
  onMessageReceived: Message!
  onOnline: Person!
}

type User {
  email: ID!
  id: ID!
  personId: ID!
}

input CreateUserInput {
  clientMutationId: ID
  email: ID!
  image: Url
  name: ID!
  password: ID!
}

input InviteFriendInput {
  clientMutationId: ID
  email: ID!
}

input LoginInput {
  clientMutationId: ID
  email: ID!
  password: ID!
}

input MessageFilter {
  AND: [MessageFilter!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_gt: ID
  id_not_gte: ID
  id_not_in: [ID!]
  id_not_lt: ID
  id_not_lte: ID
  OR: [MessageFilter!]
  sent: DateTime
  sent_gt: DateTime
  sent_gte: DateTime
  sent_in: [DateTime!]
  sent_lt: DateTime
  sent_lte: DateTime
  sent_not: DateTime
  sent_not_gt: DateTime
  sent_not_gte: DateTime
  sent_not_in: [DateTime!]
  sent_not_lt: DateTime
  sent_not_lte: DateTime
  text: ID
  text_contains: ID
  text_ends_with: ID
  text_in: [ID!]
  text_not: ID
  text_not_contains: ID
  text_not_ends_with: ID
  text_not_in: [ID!]
  text_not_starts_with: ID
  text_starts_with: ID
}

input MessageSort {
  id: SortOperationKind
  sent: SortOperationKind
  text: SortOperationKind
}

input PersonFilter {
  AND: [PersonFilter!]
  email: ID
  email_contains: ID
  email_ends_with: ID
  email_in: [ID!]
  email_not: ID
  email_not_contains: ID
  email_not_ends_with: ID
  email_not_in: [ID!]
  email_not_starts_with: ID
  email_starts_with: ID
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_gt: ID
  id_not_gte: ID
  id_not_in: [ID!]
  id_not_lt: ID
  id_not_lte: ID
  lastSeen: DateTime
  lastSeen_gt: DateTime
  lastSeen_gte: DateTime
  lastSeen_in: [DateTime!]
  lastSeen_lt: DateTime
  lastSeen_lte: DateTime
  lastSeen_not: DateTime
  lastSeen_not_gt: DateTime
  lastSeen_not_gte: DateTime
  lastSeen_not_in: [DateTime!]
  lastSeen_not_lt: DateTime
  lastSeen_not_lte: DateTime
  name: ID
  name_contains: ID
  name_ends_with: ID
  name_in: [ID!]
  name_not: ID
  name_not_contains: ID
  name_not_ends_with: ID
  name_not_in: [ID!]
  name_not_starts_with: ID
  name_starts_with: ID
  OR: [PersonFilter!]
}

input PersonSort {
  email: SortOperationKind
  id: SortOperationKind
  lastSeen: SortOperationKind
  name: SortOperationKind
}

input SendMessageInput {
  clientMutationId: ID
  "The email of the person to which a message shall be send."
  recipientEmail: ID!
  "The message text."
  text: ID!
}

enum Direction {
  INCOMING
  OUTGOING
}

enum SortOperationKind {
  ASC
  DESC
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access to the annotated resource." roles: [String!]) repeatable on OBJECT | FIELD_DEFINITION

"The `Boolean` scalar type represents `true` or `false`."
scalar Boolean

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID."
scalar ID

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

scalar PaginationAmount

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String

scalar Url